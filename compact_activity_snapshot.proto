syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "shared.proto";

package pganalyze.collector;

message CompactActivitySnapshot {
  PostgresVersion postgres_version = 1;
  repeated Backend backends = 2;

  repeated VacuumProgressInformation vacuum_progress_informations = 10;
  repeated VacuumProgressStatistic vacuum_progress_statistics = 11;
}

message Backend {
  enum WaitEventType {
    UNKNOWN_WAIT_EVENT_TYPE = 0;
    LW_LOCK_NAMED = 1; // LWLockNamed
    LW_LOCK_TRANCHE = 2; // LWLockTranche
    LOCK = 3; // Lock
    BUFFER_PIN = 4; // BufferPin
    LW_LOCK = 5; // LWLock
    ACTIVITY = 6; // Activity
    CLIENT = 7; // Client
    EXTENSION = 8; // Extension
    IPC = 9; // IPC
    TIMEOUT = 10; // Timeout
    IO = 11; // IO
  }

  enum WaitEvent {
    UNKNOWN_WAIT_EVENT = 0;
    // TODO
  }

  uint64 identity = 1; // Server-wide unique identifier (backend_start + PID)
  int32 pid = 2;

  bool has_role_idx = 3;
  int32 role_idx = 4;

  bool has_database_idx = 5;
  int32 database_idx = 6;

  bool has_query_idx = 7;
  int32 query_idx = 8;

  string query_text = 9;

  string application_name = 10;
  string client_addr = 11;
  int32 client_port = 12;

  google.protobuf.Timestamp backend_start = 13;
  google.protobuf.Timestamp xact_start = 14;
  google.protobuf.Timestamp query_start = 15;
  google.protobuf.Timestamp state_change = 16;

  bool waiting = 17;
  string state = 18;

  string wait_event_type = 19;
  string wait_event = 20;
  string backend_type = 21;
}

message VacuumProgressInformation {
  uint64 vacuum_identity = 1; // Server-wide unique identifier for this vacuum run (query_start + PID)

  int32 role_idx = 2;
  int32 database_idx = 3;
  int32 relation_idx = 4;
  uint64 backend_identity = 5;

  google.protobuf.Timestamp started_at = 6;
  bool autovacuum = 7;
  bool toast = 8;
}

message VacuumProgressStatistic {
  enum VacuumPhase {
    INITIALIZING = 0;   // "initializing"
    SCAN_HEAP = 1;      // "scanning heap"
    VACUUM_INDEX = 2;   // "vacuuming indexes"
    VACUUM_HEAP = 3;    // "vacuuming heap"
    INDEX_CLEANUP = 4;  // "cleaning up indexes"
    TRUNCATE = 5;       // "truncating heap"
    FINAL_CLEANUP = 6;  // "performing final cleanup"
  }

  uint64 vacuum_identity = 1; // Server-wide unique identifier for this vacuum run (query_start + PID)
  VacuumPhase phase = 2;
  int64 heap_blks_total = 3;
  int64 heap_blks_scanned = 4;
  int64 heap_blks_vacuumed = 5;
  int64 index_vacuum_count = 6;
  int64 max_dead_tuples = 7;
  int64 num_dead_tuples = 8;
}
