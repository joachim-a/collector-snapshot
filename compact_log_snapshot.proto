syntax = "proto3";

import "google/protobuf/timestamp.proto";

package pganalyze.collector;

message CompactLogSnapshot {
  repeated LogFileReference log_file_references = 1;
  repeated LogLineInformation log_line_informations = 2;
  repeated QuerySample query_samples = 3;
}

message LogFileReference {
  string uuid = 1;
  string s3_location = 2;
  string s3_cek_algo = 3;
  string s3_cmk_key_id = 4;

  int64 byte_size = 5;
  string original_name = 6;
}

message LogLineInformation {
  int32 log_file_idx = 1;

  string uuid = 2;
  string parent_uuid = 3; // optional

  int64 byte_start = 4;
  int64 byte_content_start = 5;
  int64 byte_end = 6;

  bool has_role_idx = 7;
  int32 role_idx = 8;

  bool has_database_idx = 9;
  int32 database_idx = 10;

  bool has_query_idx = 11;
  int32 query_idx = 12;

  google.protobuf.Timestamp occurred_at = 13;
  int32 backend_pid = 14;

  enum LogLevel {
    UNKNOWN = 0;

    // Postgres log levels https://www.postgresql.org/docs/9.6/static/runtime-config-logging.html#RUNTIME-CONFIG-SEVERITY-LEVELS
    DEBUG = 1; // Provides successively-more-detailed information for use by developers.
    INFO = 2; // Provides information implicitly requested by the user, e.g., output from VACUUM VERBOSE.
    NOTICE = 3; // Provides information that might be helpful to users, e.g., notice of truncation of long identifiers.
    WARNING = 4; // Provides warnings of likely problems, e.g., COMMIT outside a transaction block.
    ERROR = 5; // Reports an error that caused the current command to abort.
    LOG = 6; // Reports information of interest to administrators, e.g., checkpoint activity.
    FATAL = 7; // Reports an error that caused the current session to abort.
    PANIC = 8; // Reports an error that caused all database sessions to abort.

    // These levels are typically only used in additional lines for context
    DETAIL = 9;
    HINT = 10;
    CONTEXT = 11;
    STATEMENT = 12;
    QUERY = 13; // This is specific to PL/pgSQL
  }

  LogLevel level = 15;

  enum LogClassification {
    UNKNOWN_LOG_CLASSIFICATION = 0;

    // Server events
    SERVER_CRASHED = 1; // "Segmentation fault", "was terminated by signal 6", "was terminated by signal 11"
    SERVER_START = 2; // "database system is ready", "entering standby mode", "database system was shut down"
    SERVER_MISC = 3; // "could not open usermap file"

    // Connection-related
    CONNECTION_RECEIVED = 10; // "connection received: "
    CONNECTION_AUTHORIZED = 11; // "connection authorized: "
    CONNECTION_REJECTED = 12; // "pg_hba.conf rejects connection", "is not currently accepting connections", "password authentication failed"
    CONNECTION_DISCONNECTED = 13; // "disconnection: "
    CONNECTION_CLIENT = 14; // "incomplete startup packet"
    TOO_MANY_CONNECTIONS_ROLE = 15; // "too many connections for role"

    // Checkpointer related
    CHECKPOINT_STARTING = 20; // "checkpoint starting: "
    CHECKPOINT_COMPLETE = 21; // "checkpoint complete: "
    CHECKPOINT_TOO_FREQUENT = 22; // "checkpoints are occurring too frequently"
    RESTARTPOINT_STARTING = 23; // "restartpoint starting: "
    RESTARTPOINT_COMPLETE = 24; // "restartpoint complete: "
    RESTARTPOINT_AT = 25; // "recovery restart point at"

    // WAL/Archiving
    WAL_INVALID_RECORD_LENGTH = 30; // "invalid record length"
    WAL_REDO = 31; // "redo "

    // Autovacuum
    AUTOVACUUM_CANCEL = 40; // "canceling autovacuum task"
    TXID_WRAPAROUND_WARNING = 41; // "database * must be vacuumed within"
    TXID_WRAPAROUND_ERROR = 42; //"database is not accepting commands to avoid wraparound data loss"

    // Locks
    LOCK_ACQUIRED = 50; // "acquired *Lock"
    LOCK_WAITING = 51; // "still waiting for *Lock"
    LOCK_TIMEOUT = 52; // "canceling statement due to lock timeout"
    LOCK_DEADLOCK_DETECTED = 53; // "process * detected deadlock while waiting"
    LOCK_DEADLOCK_AVOIDED = 54; // "process * avoided deadlock for *Lock"

    // Notices about statement execution
    STATEMENT_DURATION = 60; // "duration: "

    // Standby
    STANDBY_RESTORED_WAL_FROM_ARCHIVE = 70; // "restored log file * from archive"
    STANDBY_STARTED_STREAMING = 71; // "started streaming WAL"
    STANDBY_CONSISTENT_RECOVERY_STATE = 72; // "consistent recovery state reached at"
  }

  LogClassification classification = 16;

  string details_json = 17; // JSON-encoded additional details about this log line
}

message QuerySample {
  int32 query_idx = 1;
  google.protobuf.Timestamp occurred_at = 2;
  double runtime_ms = 3;

  string log_line_uuid = 10;

  bool has_explain = 20;
  string explain_output = 21;
  string explain_error = 22;
}
