syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "shared.proto";

package pganalyze.collector;

// Format Version: 1.0.0

message FullSnapshot {
  // Basic information about this snapshot
  int32 snapshot_version_major = 1;
  int32 snapshot_version_minor = 2;
  string collector_version = 3;
  bool failed_run = 4; // failed runs are submitted so we can provide more context in the UI

  string snapshot_uuid = 10;
  google.protobuf.Timestamp collected_at = 11;
  uint32 collected_interval_secs = 12;

  CollectorStatistic collector_statistic = 20;
  repeated string collector_errors = 21; // log error messages that happened during the collector run

  // Per server (and hence snapshot)
  System system = 100;
  PostgresVersion postgres_version = 101;

  repeated RoleReference role_references = 102;
  repeated DatabaseReference database_references = 103;

  repeated RoleInformation role_informations = 110;
  repeated DatabaseInformation database_informations = 111;

  repeated LogLine logs = 120;
  repeated Backend backends = 121;
  repeated Setting settings = 122;

  repeated TablespaceReference tablespace_references = 130;
  repeated TablespaceInformation tablespace_informations = 131;

  // Per database
  repeated QueryReference query_references = 200;
  repeated RelationReference relation_references = 201;
  repeated IndexReference index_references = 202;
  repeated FunctionReference function_references = 203;

  repeated QueryInformation query_informations = 210;
  repeated QueryStatistic query_statistics = 211;
  repeated QueryExplain query_explains = 212;

  repeated RelationInformation relation_informations = 220;
  repeated RelationStatistic relation_statistics = 221;
  // reserved 222, used to be relation_bloat_statistics
  repeated RelationEvent relation_events = 223;

  repeated IndexInformation index_informations = 224;
  repeated IndexStatistic index_statistics = 225;
  // reserved 226, used to be index_bloat_statistics

  repeated FunctionInformation function_informations = 227;
  repeated FunctionStatistic function_statistics = 228;
}

// PER SERVER

message CollectorStatistic {
  string go_version = 10;

  // Statistics from after the collection input step
  uint64 memory_heap_allocated_bytes = 13; // Bytes allocated and not yet freed
  uint64 memory_heap_objects = 14;         // Total number of allocated objects
  uint64 memory_system_bytes = 15;         // Bytes obtained from system (sum of heap and fixed-size structures)
  uint64 memory_rss_bytes = 16;            // Memory allocated in bytes as seen by the OS

  int32 active_goroutines = 20;            // Number of active Go routines

  // Diff-ed statistics between two runs
  int64 cgo_calls = 30;
}

message RoleInformation {
  int32 role_idx = 1;

  bool inherit = 2;           // Role automatically inherits privileges of roles it is a member of
  bool login = 3;             // Role can log in. That is, this role can be given as the initial session authorization identifier
  bool create_db = 4;         // Role can create databases
  bool create_role = 5;       // Role can create more roles
  bool super_user = 6;        // Role has superuser privileges
  bool replication = 7;       // Role can initiate streaming replication and put the system in and out of backup mode.
  bool bypass_rls = 8;        // Role bypasses every row level security policy, see https://www.postgresql.org/docs/9.5/static/ddl-rowsecurity.html
  int32 connection_limit = 9; // For roles that can log in, this sets maximum number of concurrent connections this role can make. -1 means no limit.

  NullTimestamp password_valid_until = 10; // Password expiry time (only used for password authentication); null if no expiration
  repeated string config = 11;             // Role-specific defaults for run-time configuration variables
  repeated int32 member_of = 12;           // List of roles that this role is a member of (i.e. whose permissions it inherits)
}

message DatabaseInformation {
  int32 database_idx = 1;

  int32 owner_role_idx = 2;   // Owner of the database, usually the user who created it
  string encoding = 3;        // Character encoding for this database
  string collate = 4;         // LC_COLLATE for this database
  string c_type = 5;          // LC_CTYPE for this database
  bool is_template = 6;       // If true, then this database can be cloned by any user with CREATEDB privileges; if false, then only superusers or the owner of the database can clone it.
  bool allow_connections = 7; // If false then no one can connect to this database. This is used to protect the template0 database from being altered.
  int32 connection_limit = 8; // Sets maximum number of concurrent connections that can be made to this database. -1 means no limit.

  // All transaction IDs before this one have been replaced with a permanent ("frozen") transaction ID in this database.
	// This is used to track whether the database needs to be vacuumed in order to prevent transaction ID wraparound or to
	// allow pg_clog to be shrunk. It is the minimum of the per-table pg_class.relfrozenxid values.
  uint32 frozen_xid = 9;

  // All multixact IDs before this one have been replaced with a transaction ID in this database.
	// This is used to track whether the database needs to be vacuumed in order to prevent multixact ID wraparound or to
	// allow pg_multixact to be shrunk. It is the minimum of the per-table pg_class.relminmxid values.
  uint32 minimum_multixact_xid = 10;

  // Whether the collector was able to connect to this database and fetch local catalog data (e.g. schema)
  bool collected_local_catalog_data = 11;
}

message PostgresVersion {
  string full = 1;
  string short = 2;
  int64 numeric = 3;
}

message LogLine {
  int64 occurred_at = 1;
  SourceType source = 2;
  NullString client_ip = 3;
  string log_level = 4;
  int32 backend_pid = 5;
  string content = 6;
  repeated LogLine additional_lines = 7;

  enum SourceType {
    PostgresSource = 0;
    AmazonRdsSource = 1;
  }
}

message Setting {
  string name = 1;
  string current_value = 2;
  NullString unit = 3;
  NullString boot_value = 4;
  NullString reset_value = 5;
  NullString source = 6;
  NullString source_file = 7;
  NullString source_line = 8;
}

message Backend {
  int32 database_idx = 1;
  int32 role_idx = 2;
  int32 query_idx = 3; // Optional, -1 if no query currently/previously running

  int64 pid = 4;
  string application_name = 5;
  string client_addr = 6;

  google.protobuf.Timestamp backend_start = 7;
  google.protobuf.Timestamp xact_start = 8;
  google.protobuf.Timestamp query_start = 9;
  google.protobuf.Timestamp state_change = 10;

  bool waiting = 11;
  string state = 12;
}

message TablespaceReference {
  string name = 1; // Tablespace name
}

message TablespaceInformation {
  int32 tablespace_idx = 1;

  int32 disk_partition_idx = 2; // Disk partition that this tablespace resides on (-1 if unknown)
  int32 role_idx = 3;           // Owner of the tablespace, usually the user who created it
  repeated string config = 4;   // Tablespace-level options, as "keyword=value" strings
}

message System {
  SystemInformation system_information = 1;
  string system_id = 2; // Unique identifier for this system
  string system_scope = 3; // Name the system ID is scoped by (optional)

  SchedulerStatistic scheduler_statistic = 10;
  MemoryStatistic memory_statistic = 11;

  CPUInformation cpu_information = 12;
  repeated CPUReference cpu_references = 13;
  repeated CPUStatistic cpu_statistics = 14;

  repeated NetworkReference network_references = 15;
  repeated NetworkStatistic network_statistics = 16;

  repeated DiskReference disk_references = 17;
  repeated DiskInformation disk_informations = 18;
  repeated DiskStatistic disk_statistics = 19;

  repeated DiskPartitionReference disk_partition_references = 20;
  repeated DiskPartitionInformation disk_partition_informations = 21;
  repeated DiskPartitionStatistic disk_partition_statistics = 22;

  int32 data_directory_disk_partition_idx = 30; // Disk partition that the PostgreSQL data directory lives on
  int32 xlog_disk_partition_idx = 31;           // Disk partition that the PostgreSQL WAL lives on
  uint64 xlog_used_bytes = 32;                  // Size of the WAL directory, in bytes (not necessarily the same as used bytes on the WAL partition!)
}

message SystemInformation {
  enum SystemType {
    SELF_HOSTED_SYSTEM = 0;
    AMAZON_RDS_SYSTEM = 1;
    HEROKU_SYSTEM = 2;
  }

  SystemType type = 1;

  oneof info {
    SystemInformationSelfHosted self_hosted = 2;
    SystemInformationAmazonRDS amazon_rds = 3;
  }

  google.protobuf.Timestamp boot_time = 10; // Timestamp for when the system was started (aka uptime)
}

message SystemInformationSelfHosted {
  string hostname = 1;
  string architecture = 2;
  string operating_system = 3;
  string platform = 4;
  string platform_family = 5;
  string platform_version = 6;
  string virtualization_system = 7; // Name of the virtualization system (only if we're a guest)
  string kernel_version = 8;
  string database_system_identifier = 9; // Postgres internal system identifier from pg_controldata
}

message SystemInformationAmazonRDS {
  string region = 1;
  string instance_class = 2;
  string instance_id = 3;
  string status = 4;
  string availability_zone = 5;
  bool publicly_accessible = 6;
  bool multi_az = 7;
  string secondary_availability_zone = 8;
  string ca_certificate = 9;
  bool auto_minor_version_upgrade = 10;
  bool auto_major_version_upgrade = 11;
  string preferred_maintenance_window = 12;
  string preferred_backup_window = 14;
  google.protobuf.Timestamp latest_restorable_time = 13;
  int32 backup_retention_period_days = 15;
  string master_username = 16;
  string initial_db_name = 17;
  google.protobuf.Timestamp created_at = 18;
  bool enhanced_monitoring = 19;

  string parameter_apply_status = 40;
  bool parameter_pgss_enabled = 41;
}

message SchedulerStatistic {
  double load_average_1min = 1;
  double load_average_5min = 2;
  double load_average_15min = 3;
}

message MemoryStatistic {
  uint64 total_bytes = 1;
  uint64 cached_bytes = 2;
  uint64 buffers_bytes = 3;
  uint64 free_bytes = 4;
  uint64 writeback_bytes = 5;
  uint64 dirty_bytes = 6;
  uint64 slab_bytes = 7;
  uint64 mapped_bytes = 8;
  uint64 page_tables_bytes = 9;
  uint64 active_bytes = 10;
  uint64 inactive_bytes = 11;
  uint64 available_bytes = 12;
  uint64 swap_used_bytes = 13;
  uint64 swap_total_bytes = 14;

  uint64 huge_pages_size_bytes = 20;
  uint64 huge_pages_free = 21;
  uint64 huge_pages_total = 22;
  uint64 huge_pages_reserved = 23;
  uint64 huge_pages_surplus = 24;

  uint64 application_bytes = 30; // Some systems only tell us how much memory PostgreSQL is using (and nothing else)
}

message CPUInformation {
  string model = 1;
  int32 cache_size_bytes = 2;
  double speed_mhz = 3;
  int32 socket_count = 4;
  int32 physical_core_count = 5;
  int32 logical_core_count = 6;
}

message CPUReference {
  string core_id = 1; // Which CPU core these stats refer to (-1 for systems where we only have an aggregate for all cores)
}

message CPUStatistic {
  int32 cpu_idx = 1;

  double user_percent = 2;
  double system_percent = 3;
  double idle_percent = 4;
  double nice_percent = 5;
  double iowait_percent = 6;
  double irq_percent = 7;
  double soft_irq_percent = 8;
  double steal_percent = 9;
  double guest_percent = 10;
  double guest_nice_percent = 11;
}

message NetworkReference {
  string interface_name = 1;
}

message NetworkStatistic {
  int32 network_idx = 1;
  uint64 transmit_throughput_bytes_per_second = 2;
  uint64 receive_throughput_bytes_per_second = 3;
}

message DiskReference {
  string device_name = 1;
}

message DiskInformation {
  int32 disk_idx = 1;

  string disk_type = 2; // Disk type (hdd/sdd/io1/gp2)
  string scheduler = 3; // Linux Scheduler (noop/anticipatory/deadline/cfq)
  uint32 provisioned_iops = 4; // If applicable, how many IOPS are provisioned for this device
  bool encrypted = 5; // If applicable, is this device encrypted? (default false)
}

message DiskStatistic {
  int32 disk_idx = 1;

  double read_operations_per_second = 2; // The average number of read requests that were issued to the device per second
  double reads_merged_per_second = 3;    // The average number of read requests merged per second that were queued to the device
  double bytes_read_per_second = 4;      // The average number of bytes read from the device per second
  double avg_read_latency = 5;           // The average time (in milliseconds) for read requests issued to the device to be served

  double write_operations_per_second = 6; // The average number of write requests that were issued to the device per second
  double writes_merged_per_second = 7;    // The average number of write requests merged per second that were queued to the device
  double bytes_written_per_second = 8;    // The average number of bytes written to the device per second
  double avg_write_latency = 9;           // The average time (in milliseconds) for write requests issued to the device to be served

  int32 avg_queue_size = 10;         // Average I/O operations in flight at the same time (waiting or worked on by the device)
  double utilization_percent = 12;   // Percentage of CPU time during which I/O requests were issued to the device (bandwidth utilization for the device)
}

message DiskPartitionReference {
  string mountpoint = 1;
}

message DiskPartitionInformation {
  int32 disk_partition_idx = 1;
  int32 disk_idx = 2;

  string filesystem_type = 3; // ext4/zfs/etc.
  string filesystem_opts = 4; // filesystem options (noatime, etc)
  string partition_name = 5;  // Platform-specific name for the partition (e.g. /dev/sda9)
}

message DiskPartitionStatistic {
  int32 disk_partition_idx = 1;

  uint64 used_bytes = 2;
  uint64 total_bytes = 3;
}

// PER DATABASE

message QueryStatistic {
  int32 query_idx = 1;

  int64 calls = 2;
  double total_time = 3;
  int64 rows = 4;
  int64 shared_blks_hit = 5;
  int64 shared_blks_read = 6;
  int64 shared_blks_dirtied = 7;
  int64 shared_blks_written = 8;
  int64 local_blks_hit = 9;
  int64 local_blks_read = 10;
  int64 local_blks_dirtied = 11;
  int64 local_blks_written = 12;
  int64 temp_blks_read = 13;
  int64 temp_blks_written = 14;
  double blk_read_time = 15;
  double blk_write_time = 16;
}

message QueryExplain {
  int32 query_idx = 1;

  int64 occurred_at = 4;
  double runtime = 5;
  string explain_output = 6;
  string explain_error = 7;
}

message RelationInformation {
  int32 relation_idx = 1;

  string relation_type = 2;
  NullString view_definition = 3;

  repeated Column columns = 4;
  repeated Constraint constraints = 5;

  string persistence_type = 6;
  int32 fillfactor = 7;
  bool has_oids = 8;
  bool has_inheritance_children = 9;
  bool has_toast = 10;

  uint32 frozen_xid = 11;
  uint32 minimum_multixact_xid = 12;

  // True if another process is currently holding an AccessExclusiveLock on this
  // relation, this also means we won't have columns/index/constraints information
  bool exclusively_locked = 13;

  message Column {
    string name = 2;
    string data_type = 3;
    NullString default_value = 4;
    bool not_null = 5;
    int32 position = 6;
  }

  message Constraint {
    int32 foreign_relation_idx = 1;     // If a foreign key, the referenced table

    string name = 2;                    // Constraint name (not necessarily unique!)
    string type = 3;                    // c = check constraint, f = foreign key constraint, p = primary key constraint, u = unique constraint, t = constraint trigger, x = exclusion constraint
    string constraint_def = 4;          // Human-readable representation of the expression
    repeated int32 columns = 5;         // If a table constraint (including foreign keys, but not constraint triggers), list of the constrained columns
    repeated int32 foreign_columns = 6; // If a foreign key, list of the referenced columns
    string foreign_update_type = 7;     // Foreign key update action code: a = no action, r = restrict, c = cascade, n = set null, d = set default
    string foreign_delete_type = 8;     // Foreign key deletion action code: a = no action, r = restrict, c = cascade, n = set null, d = set default
    string foreign_match_type = 9;      // Foreign key match type: f = full, p = partial, s = simple
  }
}

message RelationStatistic {
  int32 relation_idx = 1;

  int64 size_bytes = 2;
  int64 seq_scan = 3;             // Number of sequential scans initiated on this table
  int64 seq_tup_read = 4;         // Number of live rows fetched by sequential scans
  int64 idx_scan = 5;             // Number of index scans initiated on this table
  int64 idx_tup_fetch = 6;        // Number of live rows fetched by index scans
  int64 n_tup_ins = 7;            // Number of rows inserted
  int64 n_tup_upd = 8;            // Number of rows updated
  int64 n_tup_del = 9;            // Number of rows deleted
  int64 n_tup_hot_upd = 10;       // Number of rows HOT updated (i.e., with no separate index update required)
  int64 n_live_tup = 11;          // Estimated number of live rows
  int64 n_dead_tup = 12;          // Estimated number of dead rows
  int64 n_mod_since_analyze = 13; // Estimated number of rows modified since this table was last analyzed
  int64 heap_blks_read = 18;      // Number of disk blocks read from this table
  int64 heap_blks_hit = 19;       // Number of buffer hits in this table
  int64 idx_blks_read = 20;       // Number of disk blocks read from all indexes on this table
  int64 idx_blks_hit = 21;        // Number of buffer hits in all indexes on this table
  int64 toast_blks_read = 22;     // Number of disk blocks read from this table's TOAST table (if any)
  int64 toast_blks_hit = 23;      // Number of buffer hits in this table's TOAST table (if any)
  int64 tidx_blks_read = 24;      // Number of disk blocks read from this table's TOAST table indexes (if any)
  int64 tidx_blks_hit = 25;       // Number of buffer hits in this table's TOAST table indexes (if any)
}

message RelationEvent {
  enum EventType {
    MANUAL_VACUUM = 0;  // Manually vacuumed (not counting VACUUM FULL)
    AUTO_VACUUM = 1;    // Vacuumed by the autovacuum daemon
    MANUAL_ANALYZE = 2; // Manually analyzed
    AUTO_ANALYZE = 3;   // Analyzed by the autovacuum daemon
  }

  int32 relation_idx = 1;
  EventType type = 2;
  google.protobuf.Timestamp occurred_at = 3;
  bool approximate_occurred_at = 4; // In case the "occurred_at" field is approximate, because more than one kind of this event happened during the snapshot
}

message IndexInformation {
  int32 index_idx = 1;
  int32 relation_idx = 2;

  repeated int32 columns = 3;
  string index_def = 4;
  NullString constraint_def = 5;

  bool is_primary = 6;
  bool is_unique = 7;
  bool is_valid = 8;
  int32 fillfactor = 9;
  string index_type = 10;
}

message IndexStatistic {
  int32 index_idx = 1;

  int64 size_bytes = 2;
  int64 idx_scan = 3;
  int64 idx_tup_read = 4;
  int64 idx_tup_fetch = 6;
  int64 idx_blks_read = 7;
  int64 idx_blks_hit = 8;
}

message FunctionInformation {
  int32 function_idx = 1;

  string language = 3;
  string source = 4;
  string source_bin = 5;
  repeated string config = 6;
  string result = 8;

  bool aggregate = 9;
  bool window = 10;
  bool security_definer = 11;
  bool leakproof = 12;
  bool strict = 13;
  bool returns_set = 14;
  string volatile = 15;
}

message FunctionStatistic {
  int32 function_idx = 1;

  int64 calls = 2;
  double total_time = 3;
  double self_time = 4;
}
